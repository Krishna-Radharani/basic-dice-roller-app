package com.example.diceroller

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.material3.Button
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import com.example.diceroller.ui.theme.DiceRollerTheme

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            DiceRollerTheme {
                DiceRollerApp()
            }
        }
    }
}

data class Player(
    val name: String,
    var position: Int,
    val color: Color
)

@Preview
@Composable
fun DiceRollerApp() {
    DiceWithButtonAndImage(
        modifier = Modifier
            .fillMaxSize()
            .wrapContentSize(Alignment.Center)
    )
}

@Composable
fun DiceWithButtonAndImage(modifier: Modifier = Modifier) {
    var result by remember { mutableStateOf(1) }
    var currentPlayerIndex by remember { mutableStateOf(0) }
    val players = remember {
        mutableStateListOf(
            Player("Player 1", 0, Color.Red),
            Player("Player 2", 0, Color.Blue),
            Player("Player 3", 0, Color.Green),
            Player("Player 4", 0, Color.Yellow)
        )
    }

    val imageResource = when (result) {
        1 -> R.drawable.dice_1
        2 -> R.drawable.dice_2
        3 -> R.drawable.dice_3
        4 -> R.drawable.dice_4
        5 -> R.drawable.dice_5
        else -> R.drawable.dice_6
    }

    Column(
        modifier = modifier,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Image(
            painter = painterResource(imageResource),
            contentDescription = result.toString(),
            modifier = Modifier.size(100.dp)
        )
        Spacer(modifier = Modifier.height(16.dp))

        Button(onClick = {
            result = (1..6).random()
            players[currentPlayerIndex].position = (players[currentPlayerIndex].position + result) % 52
            currentPlayerIndex = (currentPlayerIndex + 1) % players.size
        }) {
            Text(text = stringResource(R.string.roll))
        }

        Spacer(modifier = Modifier.height(16.dp))

        LudoBoard(players)
    }
}

@Composable
fun LudoBoard(players: List<Player>) {
    Box(
        modifier = Modifier
            .size(300.dp)
            .background(Color.White)
            .padding(16.dp)
    ) {
        // Simulated board with players
        for (player in players) {
            Box(
                modifier = Modifier
                    .size(30.dp)
                    .background(player.color, shape = CircleShape)
                    .align(getPlayerAlignment(player.position))
            )
        }
    }
}

fun getPlayerAlignment(position: Int): Alignment {
    // Simulated positions for simplicity, replace with actual Ludo board positions
    return when (position % 8) {
        0 -> Alignment.TopStart
        1 -> Alignment.TopCenter
        2 -> Alignment.TopEnd
        3 -> Alignment.CenterEnd
        4 -> Alignment.BottomEnd
        5 -> Alignment.BottomCenter
        6 -> Alignment.BottomStart
        else -> Alignment.CenterStart
    }
}
